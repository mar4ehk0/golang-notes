// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=pkg/repository/repository.go -destination=mocks/mock_note.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/mar4ehk0/notes/model"
	dto "github.com/mar4ehk0/notes/pkg/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
	isgomock struct{}
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user dto.UserSingUpDto) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GetUserByEmail mocks base method.
func (m *MockAuthorization) GetUserByEmail(email string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthorizationMockRecorder) GetUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuthorization)(nil).GetUserByEmail), email)
}

// MockNote is a mock of Note interface.
type MockNote struct {
	ctrl     *gomock.Controller
	recorder *MockNoteMockRecorder
	isgomock struct{}
}

// MockNoteMockRecorder is the mock recorder for MockNote.
type MockNoteMockRecorder struct {
	mock *MockNote
}

// NewMockNote creates a new mock instance.
func NewMockNote(ctrl *gomock.Controller) *MockNote {
	mock := &MockNote{ctrl: ctrl}
	mock.recorder = &MockNoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNote) EXPECT() *MockNoteMockRecorder {
	return m.recorder
}

// AddNote mocks base method.
func (m *MockNote) AddNote(userID int, input dto.NoteDto) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNote", userID, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNote indicates an expected call of AddNote.
func (mr *MockNoteMockRecorder) AddNote(userID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNote", reflect.TypeOf((*MockNote)(nil).AddNote), userID, input)
}

// AddNoteWithTag mocks base method.
func (m *MockNote) AddNoteWithTag(userID int, input dto.NoteDto) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNoteWithTag", userID, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNoteWithTag indicates an expected call of AddNoteWithTag.
func (mr *MockNoteMockRecorder) AddNoteWithTag(userID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNoteWithTag", reflect.TypeOf((*MockNote)(nil).AddNoteWithTag), userID, input)
}

// DeleteNote mocks base method.
func (m *MockNote) DeleteNote(noteID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", noteID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockNoteMockRecorder) DeleteNote(noteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockNote)(nil).DeleteNote), noteID)
}

// GetNoteByID mocks base method.
func (m *MockNote) GetNoteByID(noteID int) (model.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteByID", noteID)
	ret0, _ := ret[0].(model.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteByID indicates an expected call of GetNoteByID.
func (mr *MockNoteMockRecorder) GetNoteByID(noteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteByID", reflect.TypeOf((*MockNote)(nil).GetNoteByID), noteID)
}

// GetNotesByUserID mocks base method.
func (m *MockNote) GetNotesByUserID(userID int) ([]model.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesByUserID", userID)
	ret0, _ := ret[0].([]model.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotesByUserID indicates an expected call of GetNotesByUserID.
func (mr *MockNoteMockRecorder) GetNotesByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesByUserID", reflect.TypeOf((*MockNote)(nil).GetNotesByUserID), userID)
}

// UpdateNote mocks base method.
func (m *MockNote) UpdateNote(noteID int, input dto.NoteDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", noteID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockNoteMockRecorder) UpdateNote(noteID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockNote)(nil).UpdateNote), noteID, input)
}

// MockTag is a mock of Tag interface.
type MockTag struct {
	ctrl     *gomock.Controller
	recorder *MockTagMockRecorder
	isgomock struct{}
}

// MockTagMockRecorder is the mock recorder for MockTag.
type MockTagMockRecorder struct {
	mock *MockTag
}

// NewMockTag creates a new mock instance.
func NewMockTag(ctrl *gomock.Controller) *MockTag {
	mock := &MockTag{ctrl: ctrl}
	mock.recorder = &MockTagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTag) EXPECT() *MockTagMockRecorder {
	return m.recorder
}

// GetTagByID mocks base method.
func (m *MockTag) GetTagByID(tagID int) (model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByID", tagID)
	ret0, _ := ret[0].(model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByID indicates an expected call of GetTagByID.
func (mr *MockTagMockRecorder) GetTagByID(tagID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByID", reflect.TypeOf((*MockTag)(nil).GetTagByID), tagID)
}

// GetTags mocks base method.
func (m *MockTag) GetTags() ([]model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags")
	ret0, _ := ret[0].([]model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockTagMockRecorder) GetTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockTag)(nil).GetTags))
}

// GetTagsByNoteID mocks base method.
func (m *MockTag) GetTagsByNoteID(noteID int) ([]model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsByNoteID", noteID)
	ret0, _ := ret[0].([]model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsByNoteID indicates an expected call of GetTagsByNoteID.
func (mr *MockTagMockRecorder) GetTagsByNoteID(noteID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsByNoteID", reflect.TypeOf((*MockTag)(nil).GetTagsByNoteID), noteID)
}
